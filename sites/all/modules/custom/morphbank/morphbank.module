<?php
/**
 * @file
 * Displays Morphbank images on species pages; images come from
 * queries based on the taxonomic name for the given species page.
 */

/**
 * Implements hook_menu().
 *
 * @return multitype:string multitype:string
 */
function morphbank_menu(){
  $items['morphbank'] = array(
    'title' => 'Morphbank Callback',
    'description' => 'Endpoint to enable dynamic creation of Morphbank content.', //TODO: replace
    'page callback' => 'morphbank_callback',
    'file' => 'morphbank.ajax.inc',
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Callback to morphbank_search; called by morphbank_views_default_views ?
 *
 * @return multitype:string
 */
function morphbank_callbacks(){
  return array(
    'morphbank_images' => 'morphbank_search'
  );
}


/**
 * Use $tid to perform morphbank query.
 *
 * @param int $tid
 *   Term id of the current species page (taxonomy term page)
 * @param int $age
 *   Number of seconds in one week
 *   @todo: use or remove?
 */
function morphbank_search($tid, $age = 604800) {
  //TODO: return some content here?
  $term = taxonomy_term_load($tid);
  $term_name = $term->name;
  return array(
      'markup' => array(
          '#markup' => "<p>Term: {$term_name}</p>"
          ),
      );

}

/*
 * Uses $tid to generate URL for query and gets the XML response.
 * Returns the SimpleXMLElement of the response.
 * Also sends response (piecemeal) to sofapi_process_data_object; that
 * method saves and stores eolapi objects...
function sofapi_search($tid, $age = 604800){ // Seconds in one week.
}*/

/*
 * processes $data_object, which is a SimpleXMLElement
function sofapi_process_data_object($data_object, $tid, $age = 604800){
}*/

/**
 * Implements hook_views_api().
 */
function morphbank_views_api(){
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'morphbank') . '/views'
  );
}

/**
 * Implements hook_context_load_alter().
 *
 * Alters context so this module can add content
 *
 * This is where the location (on species_media, or taxonomy term, pages)
 * is dictated
 *
 * @param array $context
 */
function morphbank_context_load_alter(&$context){
  if($context->name === 'species_media' && isset($context->reactions['block'])){
    $context->reactions['block']['blocks']['views-morphbank_images-block'] = array(
      'module' => 'views',
      'delta' => 'morphbank_images-block',
      'region' => 'content',
      'weight' => '10'
    );
  }
}

/**
 * Provide image and link for footer.
 *
 * @param array $links
 */
function morphbank_footer_logos_alter(&$links){
  $options = array(
    'html' => true,
    'absolute' => true
  );
  $links[] = l(theme('image', array(
    'path' => drupal_get_path('module', 'morphbank') . '/images/mbLogoHeader.png',
    'alt' => 'Morphbank logo',
    'title' => 'Morphbank'
  )), 'http://www.morphbank.net/', $options);
}


/*****************************************************************/
/**********************     OLD STUFF     ************************/
/*****************************************************************/

/**
 * Implements hook_block_info().
 */
function morphbank_block_info() {
  $blocks['morphbank_images'] = array(
    'info' => t('Morphbank images'),
    'status' => TRUE,
    'region' => 'content',
//    'region' => 'sidebar_first',
    'visibility' => 1,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * Currently only one option: number of images to show.
 * @todo add additional functionality here, about what to search on (tid, guid, etc.).
 */
function morphbank_block_configure($delta) {
  $form = array();
  switch ($delta) {
    case 'morphbank_images':
      $form['morphbank_image_count'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum number of images to show'),
        '#size' => 6,
        '#description' => t('Enter the maximum number of images to display in block.'),
        '#default_value' => variable_get('morphbank_image_count', 10),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function morphbank_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'morphbank_images':
      variable_set('morphbank_image_count', (int)$edit['morphbank_image_count']);
      break;
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function morphbank_block_view($delta = '') {
  $block = array();
  // TODO: $delta could indicate what types of search we would like to do.
  switch ($delta) {
    case 'morphbank_images':
      $block['subject'] = t('Morphbank images');
      $block['content'] = _morphbank_api_block_contents($delta);
      break;
  }
  return $block;
}

/**
 * Grabbing the contents for the view.
 */
function _morphbank_api_block_contents($delta) {
  $output = '';
  // TODO: In this switch function, we should get additional arguments necessary
  // for the query we are to do (like the term name, if we are using that).
  switch ($delta) {
    case 'morphbank_images':
      $items = array();
      // This grabs the third element of the path, 'taxonomy/term/3', where the third argument in this case is '3'
      $tid = $_POST['tid'];
      $term = taxonomy_term_load($tid);
      $output = t('Term ID: @tid', array('@tid' => $tid));
      // $title = $term->name;
      // $items[] = l($title, "/taxonomy/term/{$termid}");
      // $contents = array('#markup' => theme('item_list', array('items' => $items)));

      /*
      $term_name = $term->name;
      $search_terms = array(
          'taxonName' => $term_name);

      // Now get the images as an array of SimpleXMLObjects, let theme functions extract information
      if ($images = morphbank_image_search($search_terms)) {
        $image_count = 0;
        foreach ($images as $image) {
          // Each $image will effectively correspond to an element (object type = "Image") from
          // the morphbank response, so the root element of the SimpleXMLObject is object.
          // <object type='Image'>
          //    <sourceId>
          //      <morphbank>805486</morphbank>
          //    </sourceId>
          //    ...
          // </object>
          $theme_variables = array(
              'image' => $image,
              );
          $output .= theme('morphbank_block_image', $theme_variables);
          $image_count++;
        }
        if ($image_count == 0) {
          $output .= t('No media found');
        }
      } else {
        $items[] = 'No media found';
        $output = array('#markup' => theme('item_list', array('items' => $items)));
      }
      */

      break;
  }
  return $output;
}
