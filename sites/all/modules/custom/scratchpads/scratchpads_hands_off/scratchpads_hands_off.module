<?php

/**
 * Implements hook_form_alter
 */
function scratchpads_hands_off_form_alter(&$form, &$form_state, $form_id){
  global $user;
  if($user->uid == 1){return;}
  $forbidden_regions = array(
    'slide_bottom',
    'slide_top',
    'content',
    'menu',
    'branding',
    'header'
  );
  switch($form_id){
    case 'block_admin_configure':
      foreach(element_children($form['regions']) as $child_key){
        foreach($forbidden_regions as $forbidden_region){
          try{
            unset($form['regions'][$child_key]['#options'][$forbidden_region]);
          }
          catch(Exception $e){
            ;
          }
        }
      }
      $contexts = context_enabled_contexts();
      foreach($contexts as $context){
        if(isset($context->reactions) && isset($context->reactions['block'])){
          foreach($context->reactions['block']['blocks'] as $context_block_key => $context_block){
            if($form['module']['#value'] == $context_block['module'] && $form['delta']['#value'] == $context_block['delta']){
              // This block is used in a context, we should therefore disable the
              // region stuff.
              $children = element_children($form['regions']);
              foreach($children as $key){
                $form['regions'][$key]['#disabled'] = TRUE;
                $form['regions'][$key]['#description'] = '<span class="error">' . t('This option is locked because this block is displayed automatically on certain pages.') . '</span>';
              }
              // We also disable the tabify stuff, as users will mess things up
              unset($form['blockexpose']);
            }
          }
        }
      }
      break;
    case 'dashboard_admin_display_form':
    case 'block_admin_display_form':
      foreach($form['blocks'] as $form_block_key => $form_block){
        switch($form_block['module']['#value']){
          case 'facetapi':
          case 'apachesolr_search':
          case 'scratchpads_blocks':
          case 'system':
            unset($form['blocks'][$form_block_key]);
          case 'views':
            switch($form_block['delta']['#value']){
              case 'front_page_content-block':
                unset($form['blocks'][$form_block_key]);
            }
        }
        // Ensure the block can only be set to the allowed regions.
        foreach($forbidden_regions as $forbidden_region){
          unset($form['blocks'][$form_block_key]['region']['#options'][$forbidden_region]);
        }
      }
      $contexts = context_enabled_contexts();
      foreach($contexts as $context){
        if(isset($context->reactions) && isset($context->reactions['block'])){
          foreach($context->reactions['block']['blocks'] as $context_block_key => $context_block){
            foreach($form['blocks'] as $form_block_key => $form_block){
              if($form_block['module']['#value'] == $context_block['module'] && $form_block['delta']['#value'] == $context_block['delta']){
                unset($form['blocks'][$form_block_key]);
              }
            }
          }
        }
      }
      // Unset certain regions
      foreach($forbidden_regions as $forbidden_region){
        unset($form['block_regions']['#value'][$forbidden_region]);
      }
      break;
    case 'system_themes_admin_form':
      global $user;
      if($user->uid != 1){
        $form['admin_theme']['admin_theme']['#disabled'] = TRUE;
        $form['admin_theme']['admin_theme']['#default_value'] = 'scratchpads_admin';
        $form['admin_theme']['admin_theme']['#title'] .= '<br/><span class="error">' . t('This option has been locked') . '</span>';
        $form['admin_theme']['node_admin_theme']['#disabled'] = TRUE;
        $form['admin_theme']['node_admin_theme']['#default_value'] = 1;
        $form['admin_theme']['node_admin_theme']['#title'] .= '<br/><span class="error">' . t('This option has been locked') . '</span>';
      }
      break;
  }
}

/**
 * Implements hook_menu_alter().
 */
function scratchpads_hands_off_menu_alter(&$items){
  $hidden_urls = _scratchpads_hands_off_hidden_urls();
  drupal_alter('scratchpads_hands_off_urls', $hidden_urls);
  foreach($hidden_urls as $hidden_url){
    $length = strlen($hidden_url);
    foreach($items as $key => $item){
      if($key == $hidden_url || substr($key, 0, $length + 1) == "$hidden_url/"){
        $items[$key]['access callback'] = 'user_access';
        $items[$key]['access arguments'] = array(
          'scratchpad team'
        );
      }
    }
  }
  // Change the callback for admin/structure/file-types so that we can remove
  // links to paths the user does not have access to.
  $items['admin/structure/file-types']['page callback'] = 'scratchpads_hands_off_file_entity_list_types_page';
}

/**
 * Implements hook_init().
 */
function scratchpads_hands_off_init(){
  if(!user_access('scratchpad team') && in_array($_GET['q'], _scratchpads_hands_off_hidden_urls())){
    drupal_access_denied();
    exit();
  }
}

/**
 * Get an array of hidden URLs
 */
function _scratchpads_hands_off_hidden_urls(){
  return array(
    'admin/appearance/settings/scratchpads',
    'admin/appearance/settings/scratchpads_admin',
    'admin/config/content/biblio/basic',
    'admin/config/content/biblio/citeproc',
    'admin/config/content/biblio/export',
    'admin/config/content/biblio/fields',
    'admin/config/content/biblio/pubtype',
    'admin/config/content/clone',
    'admin/config/content/diff',
    'admin/config/content/gm3/test',
    'admin/config/development/logging',
    'admin/config/development/modal_forms',
    'admin/config/development/performance',
    'admin/config/development/strongarm',
    'admin/config/media/file-system',
    'admin/config/regional/countries',
    'admin/config/regional/date-time',
    'admin/config/search/clean-urls',
    'admin/config/search/sitemap',
    'admin/config/system/boost',
    'admin/config/system/cron',
    'admin/config/system/customerror',
    'admin/config/system/globalredirect',
    'admin/config/system/remember_me',
    'admin/config/system/spambot',
    'admin/config/user-interface/beautytips',
    'admin/dashboard/configure',
    'admin/structure/block/list/scratchpads_admin',
    'admin/structure/file-types/manage/%/display/file_styles_large',
    'admin/structure/file-types/manage/%/display/file_styles_medium',
    'admin/structure/file-types/manage/%/display/file_styles_original',
    'admin/structure/file-types/manage/%/display/file_styles_slideshow_large',
    'admin/structure/file-types/manage/%/display/file_styles_slideshow_thumbnail',
    'admin/structure/file-types/manage/%/display/file_styles_species_slideshow_large',
    'admin/structure/file-types/manage/%/display/file_styles_species_slideshow_thumbnail',
    'admin/structure/file-types/manage/%/display/file_styles_square_thumbnail',
    'admin/structure/file-types/manage/%/display/file_styles_thumbnail',
    'admin/structure/file-types/manage/%/display/linked_node',
    'admin/structure/file-types/manage/%/display/media_large',
    'admin/structure/file-types/manage/%/display/media_link',
    'admin/structure/file-types/manage/%/display/media_original',
    'admin/structure/file-types/manage/%/display/media_preview',
    'admin/structure/file-types/manage/%/display/media_small',
    'admin/structure/file-types/manage/%/file-display',
    'user/1/edit',
    'user/%user/spambot'
  );
}

/**
 * Implements hook_contextual_links_view_alter().
 * 
 * Prevent editing of blocks from contextual links
 */
function scratchpads_hands_off_contextual_links_view_alter(&$element, $items){
  if(@isset($element['#contextual_links']['block'][1][0]) && in_array($element['#contextual_links']['block'][1][0], array(
    'facetapi',
    'apachesolr_search',
    'scratchpads_blocks',
    'system'
  )) && !user_access('scratchpad team')){
    $element = array();
  }
}

/**
 * Tweak the file overview page.
 */
function scratchpads_hands_off_file_entity_list_types_page(){
  $build = file_entity_list_types_page();
  if(user_access('scratchpad team')){return $build;}
  foreach(array_keys($build['file_type_table']['#rows']) as $key){
    unset($build['file_type_table']['#rows'][$key][2]);
    unset($build['file_type_table']['#rows'][$key][3]);
  }
  unset($build['file_type_table']['#header'][1]['colspan']);
  return $build;
}

/**
 * Implements hook_theme_registry_alter().
 */
function scratchpads_hands_off_theme_registry_alter(&$theme_registry){
  $theme_registry['dashboard_disabled_blocks']['function'] = 'theme_scratchpads_hands_off_dashboard_disabled_blocks';
}

/**
 * Callback to override the dashboard theme.
 */
function theme_scratchpads_hands_off_dashboard_disabled_blocks($variables){
  extract($variables);
  $output = '<div class="canvas-content"><p>' . t('Drag and drop these blocks to the columns below. Changes are automatically saved.') . '</p>';
  $output .= '<div id="disabled-blocks"><div class="region disabled-blocks clearfix">';
  foreach($blocks as $block){
    $output .= theme('dashboard_disabled_block', array(
      'block' => $block
    ));
  }
  $output .= '<div class="clearfix"></div>';
  $output .= '</div></div></div>';
  return $output;
}

/**
 * Implements hook_system_themes_page_alter().
 */
function scratchpads_hands_off_system_themes_page_alter(&$theme_groups){
  global $user;
  if($user->uid != 1){
    $theme_groups['disabled'] = array();
  }
}
