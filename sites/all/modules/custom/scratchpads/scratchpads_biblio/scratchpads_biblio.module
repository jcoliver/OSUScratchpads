<?php

/**
 * Implements hook_form_FORM_ID_alter.
 */
function scratchpads_biblio_form_node_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'biblio_node_form' && arg(2) == 'clone'){
    $form_state['biblio_type'] = 'set biblio type so that we can save!';
  }
}

/**
 * Implements hook_module_implements_alter.
 */
function scratchpads_biblio_module_implements_alter(&$implementations, $hook){
  if($hook == 'form_alter' && isset($implementations['scratchpads_biblio'])){
    $new_implementations = array();
    $new_implementations['scratchpads_biblio'] = $implementations['scratchpads_biblio'];
    unset($implementations['scratchpads_biblio']);
    foreach($implementations as $key => $value){
      $new_implementations[$key] = $value;
    }
    $implementations = $new_implementations;
  }
}

/**
 * Implements hook_menu_alter().
 */
function scratchpads_biblio_menu_alter(&$items){
  $items['admin/config/content/biblio'] = $items['admin/config/content/biblio/iomap'];
  $items['admin/config/content/biblio']['title'] = 'Biblio settings';
  $items['admin/config/content/biblio']['type'] = MENU_NORMAL_ITEM;
  $items['admin/config/content/biblio/iomap'] = array(
    'title' => 'Import/Export Mapping',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
}

/**
 * Implements hook_node_presave().
 * 
 * Prevent biblio nodes from being saved with a title.
 */
function scratchpads_biblio_node_presave($node){
  if($node->type == 'biblio'){
    // Set a title if it is blank.
    if(!isset($node->title)){
      $node->title = t('[TITLE BLANK]');
    }
    if(isset($node->biblio_keywords) && count($node->biblio_keywords) && ($vids = array_keys(array_filter(variable_get('biological_vids', array()))))){
      // Associate this record with terms in any vocabulary.
      $results = db_select('taxonomy_term_data', 't')->fields('t', array(
        'tid'
      ))->condition('vid', $vids)->condition('name', $node->biblio_keywords)->execute();
      foreach($results as $row){
        $node->field_taxonomic_name[LANGUAGE_NONE][] = (array)taxonomy_term_load($row->tid);
      }
    }
  }
  return $node;
}

/**
 * Implements hook_field_formatter_info().
 */
function scratchpads_biblio_field_formatter_info(){
  return array(
    'scratchpads_biblio_biblio_ref' => array(
      'label' => t('Citation'),
      'description' => t("Properly formatted citation using the site's style"),
      'field types' => array(
        'node_reference'
      )
    )
  );
}

/**
 * Implements hook_field_formatter_view().
 * 
 * For a node_reference that links to a Biblio node returns a link to the URL field as either a predefined image
 * or the favicon of the site that is linked to.
 * 
 * For all node types returns link to attached files as an image 
 */
function scratchpads_biblio_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  switch($display['type']){
    case 'scratchpads_biblio_biblio_ref':
      foreach($items as $delta => $item){
        $node = node_load($item['nid'], NULL, FALSE);
        if($node->type == 'biblio'){
          $output = theme('biblio_style', array(
            'node' => $node,
            'style_name' => biblio_get_style()
          ));
          $element[] = array(
            '#markup' => $output
          );
        }
      }
      break;
  }
  return $element;
}