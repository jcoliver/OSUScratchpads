<?php

/**
 * This module should follow http://drupal.org/node/1227706 as that issue looks
 * to be solving this problem in a much better way.
 */
/**
 * Implements hook_menu().
 */
function scratchpads_fine_grained_file_access_menu(){
  return array(
    'admin/config/media/file-access' => array(
      'title' => 'File system',
      'description' => 'Tell Drupal where to store uploaded files and how they are accessed.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'scratchpads_fine_grained_file_access_menu_file_system_settings'
      ),
      'access arguments' => array(
        'administer site configuration'
      ),
      'weight' => -10
    ),
    'file/%file/move' => array(
      'title' => 'Move',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'file_move_form',
        1
      ),
      'access callback' => 'scratchpads_fine_grained_file_access_access',
      'access arguments' => array(
        'edit',
        1
      ),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE
    )
  );
}

/**
 * Implements hook_action_info().
 * Registers custom VBO actions as Drupal actions.
 */
function scratchpads_fine_grained_file_access_action_info(){
  return array(
    'scratchpads_fine_grained_file_access_swap_file' => array(
      'type' => 'file',
      'label' => t('Swap the file between public and private folders.'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE
    )
  );
}

/**
 * Action to swap a file from public to private or vice versa.
 */
function scratchpads_fine_grained_file_access_swap_file($file){
  $file_scheme = parse_url($file->uri);
  switch($file_scheme['scheme']){
    case 'private':
      $new_scheme = 'public';
      break;
    case 'public':
      $new_scheme = 'private';
      break;
  }
  @file_move($file, "$new_scheme://{$file_scheme['host']}{$file_scheme['path']}");
}

/**
 * Page callback: Form constructor for the file deletion confirmation form.
 *
 * Path: file/%file/delete
 *
 * @param object $file
 *   A file object from file_load().
 *
 * @see file_entity_menu()
 */
function file_move_form($form, &$form_state, $file){
  $form_state['file'] = $file;
  $form['fid'] = array(
    '#type' => 'value',
    '#value' => $file->fid
  );
  $file_scheme = parse_url($file->uri);
  switch($file_scheme['scheme']){
    case 'private':
      $description = '<p><strong>' . t('Move to @folder folder', array(
        '@folder' => 'public'
      )) . '</strong></p><p>' . t('Moving a file could have unintended consequences if the file is linked to in the body text of a node.') . '</p><p>' . t('This will give access to all users of your site, including those that are not logged in.') . '</p>';
      break;
    case 'public':
      $description = '<p><strong>' . t('Move to @folder folder', array(
        '@folder' => 'private'
      )) . '</strong></p><p>' . t('Moving a file could have unintended consequences if the file is linked to in the body text of a node.') . '</p><p>' . t('This will only prevent access to the file if it is associated with a Group.') . '</p>';
      break;
  }
  return confirm_form($form, t('Are you sure you want to move the file %title?', array(
    '%title' => entity_label('file', $file)
  )), 'file/' . $file->fid, $description, t('Move'));
}

/**
 * Form submission handler for file_delete_form().
 */
function file_move_form_submit($form, &$form_state){
  if($form_state['values']['confirm'] && $file = file_load($form_state['values']['fid'])){
    scratchpads_fine_grained_file_access_swap_file($file);
    $args = array(
      '@type' => file_type_get_name($file),
      '%title' => entity_label('file', $file)
    );
    watchdog('file', '@type: moved %title.', $args);
    drupal_set_message(t('@type %title has been moved.', $args));
  }
  $form_state['redirect'] = 'file/' . $file->fid;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function scratchpads_fine_grained_file_access_form_file_entity_edit_alter(&$form, &$form_id, $form_id){
  // We add a button to the public and private files that allows a user to
  // switch the file to an alternative URI.
  // We load the file (it should be cached, so we're just trying to use a
  // reliable attribute in the form).
  $form['actions']['move_scheme'] = array(
    '#type' => 'submit',
    '#weight' => 11,
    '#submit' => array(
      'scratchpads_fine_grained_file_access_move_scheme'
    )
  );
  $file = file_load($form['fid']['#value']);
  $file_scheme = parse_url($file->uri);
  switch($file_scheme['scheme']){
    case 'private':
      $form['actions']['move_scheme']['#value'] = t('Move to @folder folder', array(
        '@folder' => 'public'
      ));
      break;
    case 'public':
      $form['actions']['move_scheme']['#value'] = t('Move to @folder folder', array(
        '@folder' => 'private'
      ));
      break;
  }
}

/**
 * Implements hook_admin_paths().
 */
function scratchpads_fine_grained_file_access_admin_paths(){
  return array(
    'file/*/move' => TRUE
  );
}

/**
 * Submit function to move a private file to the public folder.  Moving in this
 * direction requires little warning, as we're opening up access.  We only need
 * to warn about changes to URLs.
 */
function scratchpads_fine_grained_file_access_move_scheme($form, &$form_state, $c, $d){
  $destination = array();
  if(isset($_GET['destination'])){
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $form_state['redirect'] = array(
    'file/' . $form_state['values']['fid'] . '/move',
    array(
      'query' => $destination
    )
  );
}

/**
 * Note, we're not using the system_file_system_settings() form, as that could
 * be altered by other modules.  We only want the file_default_scheme option.
 */
function scratchpads_fine_grained_file_access_menu_file_system_settings(){
  // Any visible, writeable wrapper can potentially be used for the files
  // directory, including a remote file system that integrates with a CDN.
  foreach(file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $info){
    $options[$scheme] = check_plain($info['description']);
  }
  if(!empty($options)){
    $form['file_default_scheme'] = array(
      '#type' => 'radios',
      '#title' => t('Default download method'),
      '#default_value' => variable_get('file_default_scheme', isset($options['public']) ? 'public' : key($options)),
      '#options' => $options,
      '#description' => t('This setting is used as the preferred download method. The use of public files is more efficient, but does not provide any access control.') . ' ' . t('Note, this will not alter files already on your site.')
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_menu_alter().
 */
function scratchpads_fine_grained_file_access_menu_alter(&$items){
  // We set a number of paths to have different access rights.
  $items['file/add']['access callback'] = 'scratchpads_fine_grained_file_access_access';
  $items['file/add']['access arguments'] = array(
    'add'
  );
  $items['file/%file']['page callback'] = 'scratchpads_fine_grained_file_access_file_entity_view_page';
  $items['file/%file']['access callback'] = 'scratchpads_fine_grained_file_access_access';
  $items['file/%file']['access arguments'] = array(
    'view',
    1
  );
  $items['file/%file/edit']['access callback'] = 'scratchpads_fine_grained_file_access_access';
  $items['file/%file/edit']['access arguments'] = array(
    'edit',
    1
  );
  $items['file/%file/delete']['access callback'] = 'scratchpads_fine_grained_file_access_access';
  $items['file/%file/delete']['access arguments'] = array(
    'delete',
    1
  );
}

/**
 * Replacement for file_entity_view_page($file).
 */
function scratchpads_fine_grained_file_access_file_entity_view_page($file){
  drupal_set_title($file->filename);
  $uri = entity_uri('file', $file);
  // Set the file path as the canonical URL to prevent duplicate content.
  drupal_add_html_head_link(array(
    'rel' => 'canonical',
    'href' => url($uri['path'], $uri['options'])
  ), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array(
    'rel' => 'shortlink',
    'href' => url($uri['path'], array_merge($uri['options'], array(
      'alias' => TRUE
    )))
  ), TRUE);
  return file_view($file, 'full');
}

/**
 * Implements hook_permission().
 */
function scratchpads_fine_grained_file_access_permission(){
  // Following permissions are required:
  // create file
  // edit all file
  // edit own file
  // delete all file
  // delete own file
  // 
  // Following permission are not required:
  // view file (already defined by file_entity)
  return array(
    'create file' => array(
      'title' => 'Create file'
    ),
    'edit all file' => array(
      'title' => 'Edit all files'
    ),
    'edit own file' => array(
      'title' => 'Edit own files'
    ),
    'delete all file' => array(
      'title' => 'Delete all files'
    ),
    'delete own file' => array(
      'title' => 'Delete own files'
    )
  );
}

/**
 * Access control callback for finer control.
 */
function scratchpads_fine_grained_file_access_access($op = 'view', $file = FALSE){
  global $user;
  switch($op){
    case 'view':
      if(user_access('view file')){
        if(module_exists('scratchpads_group')){
          if(@isset($file->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value']) && $file->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] != 1){
            if(isset($file->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid'])){
              $group = og_load($file->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid']);
              $group = $group->getEntity();
              switch($file->{OG_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value']){
                case 0:
                  // We're defaulting to the group access.  Check if it is public, or
                  // simply if we have access to the group.
                  if($group->{OG_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'] == 0){return TRUE;}
                case 2:
                  // The file is private, simply do we have access to the group.
                  global $user;
                  $groups = og_get_entity_groups('user', $user);
                  if(isset($groups[$file->{OG_AUDIENCE_FIELD}[LANGUAGE_NONE][0]['gid']])){return TRUE;}
                  break;
              }
              return FALSE;
            }
          }
        }
      }
      return TRUE;
    case 'edit':
      if(user_access('edit all file')){return TRUE;}
      if($file->uid == $user->uid){return user_access('edit own file');}
      return FALSE;
    case 'delete':
      if(user_access('delete all file')){return TRUE;}
      if($file->uid == $user->uid){return user_access('delete own file');}
      return FALSE;
    case 'add':
      return user_access('create file');
    default:
      return FALSE;
  }
}

/**
 * Implements hook_scratchpads_default_permissions().
 */
function scratchpads_fine_grained_file_access_scratchpads_default_permissions(){
  return array(
    'editor' => array(
      'edit all file',
      'delete all file'
    ),
    'contributor' => array(
      'edit own file',
      'delete own file',
      'create file'
    )
  );
}