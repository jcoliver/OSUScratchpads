<?php
// DEFINE the file extensions that we allow.
DEFINE('FIELD_MEDIA_FILE_EXTENSIONS', 'svg tiff jpg jpeg gif png txt doc docx xls xlsx pdf ppt pptx pps ppsx odt ods odp mp3 mov mp4 m4a m4v mpeg avi ogg oga ogv wmv ico xml nex phy nhx zip kmz');
include_once ('scratchpads_media_gallery.features.inc');

/**
 * Implementation of hook_menu_alter().
 */
function scratchpads_media_gallery_menu_alter(&$items){
  $items['gallery']['menu_name'] = PRIMARY_MENU_NAME;
  $items['gallery']['weight'] = 1;
  $items['gallery']['type'] = MENU_NORMAL_ITEM;
}

/**
 * Implementation of hook_scratchpads_solr_info().
 */
function scratchpads_media_gallery_scratchpads_solr_info(){
  return array(
    'gallery' => array(
      'theme' => 'scratchpads_media_gallery',
      'empty' => 'scratchpads_media_gallery_empty'
    )
  );
}

/**
 * Implements hook_file_load()
 */
function scratchpads_media_gallery_file_load($files){
  foreach($files as $key => $file){
    if(isset($file->type) && $file->type == 'image'){
      $files[$key]->title = $file->filename;
    }
  }
}

/**
 * Check to see if we're viewing a single gallery
 */
function scratchpads_media_gallery_is_gallery_node(){
  if(isset($_GET['f']) && is_array($_GET['f'])){
    foreach($_GET['f'] as $value){
      if(substr($value, 0, 23) == 'im_field_smg_galleries:' && is_numeric(substr($value, 23))){return substr($value, 23);}
    }
  }
  return FALSE;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function scratchpads_media_gallery_ctools_plugin_api(){
  list($module, $api) = func_get_args();
  if($module == 'facetapi'){return array(
      'version' => 1
    );}
  if($module == "context" && $api == "context"){return array(
      "version" => "3"
    );}
  if($module == "file_entity" && $api == "file_default_displays"){return array(
      "version" => "1"
    );}
}

/**
 * Implements hook_facetapi_default_facet_settings().
 */
function scratchpads_media_gallery_facetapi_default_facet_settings(){
  $facets = array();
  $media_gallery_facets = scratchpads_media_gallery_facetapi_facet_info();
  $media_gallery_facets['author'] = array(
    'name' => 'tus_type_name',
    'label' => t('Media: Type'),
    'description' => t('Media: Type'),
    'query types' => array(
      'term'
    )
  );
  foreach($media_gallery_facets as $facet_id => $facet_values){
    $facet = new stdClass();
    $facet->disabled = FALSE;
    $facet->api_version = 1;
    $facet->name = 'apachesolr@solr:block:' . $facet_id;
    $facet->searcher = 'apachesolr@solr';
    $facet->realm = 'block';
    $facet->facet = $facet_id;
    $facet->enabled = TRUE;
    $facet->settings = array(
      'weight' => 0,
      'widget' => 'facetapi_links',
      'filters' => array(),
      'active_sorts' => array(
        'active' => 'active',
        'count' => 'count',
        'display' => 'display'
      ),
      'sort_weight' => array(
        'active' => -50,
        'display' => -49,
        'count' => -48
      ),
      'sort_order' => array(
        'active' => 3,
        'count' => 3,
        'display' => 4
      ),
      'empty_behavior' => 'text',
      'empty_text' => array(
        'value' => t('There are no facets available to filter on.'),
        'format' => 'filtered_html'
      ),
      'soft_limit' => 20,
      'show_expanded' => 0
    );
    $facets[$facet_id] = $facet;
    $facet = new stdClass();
    $facet->disabled = FALSE; /* Edit this to true to make a default facet disabled initially */
    $facet->api_version = 1;
    $facet->name = 'apachesolr@solr::' . $facet_id;
    $facet->searcher = 'apachesolr@solr';
    $facet->realm = '';
    $facet->facet = $facet_id;
    $facet->enabled = FALSE;
    $facet->settings = array(
      'operator' => 'and',
      'hard_limit' => '200',
      'dependencies' => array(),
      'facet_mincount' => 1,
      'facet_missing' => 0,
      'flatten' => 0,
      'query_type' => 'term'
    );
    $facets[$facet_id . '_global'] = $facet;
  }
  return $facets;
}

/**
 * Implements hook_views_default_views_alter
 */
function scratchpads_media_gallery_views_default_views_alter(&$views){
  if(isset($views['media_default'])){
    foreach(array(
      'default',
      'media_browser_1',
      'media_browser_my_files'
    ) as $display_id){
      $views['media_default']->display[$display_id]->handler->display->display_options['filters']['uri']['id'] = 'uri';
      $views['media_default']->display[$display_id]->handler->display->display_options['filters']['uri']['table'] = 'file_managed';
      $views['media_default']->display[$display_id]->handler->display->display_options['filters']['uri']['field'] = 'uri';
      $views['media_default']->display[$display_id]->handler->display->display_options['filters']['uri']['operator'] = 'not';
      $views['media_default']->display[$display_id]->handler->display->display_options['filters']['uri']['value'] = '/eolapi/';
    }
  }
}

/**
 * Implementation of hook_block_view_alter()
 */
function scratchpads_media_gallery_block_view_alter(&$data, $block){
  if($block->module == 'facetapi'){
    $map = facetapi_get_delta_map();
    $facet_info = scratchpads_media_gallery_facetapi_facet_info();
    foreach(scratchpads_media_gallery_facetapi_default_facet_settings() as $facet){
      $delta = array_search($facet->name, $map);
      if($delta == $block->delta && isset($facet_info[$facet->facet])){
        $data['subject'] = $facet_info[$facet->facet]['label'];
        break;
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function scratchpads_media_gallery_theme(){
  return array(
    'scratchpads_media_gallery' => array(
      'variables' => array(
        'results' => NULL,
        'module' => NULL
      ),
      'file' => 'scratchpads_media_gallery.theme.inc'
    ),
    'scratchpads_media_gallery_empty' => array(
      'variables' => array(),
      'file' => 'scratchpads_media_gallery.theme.inc'
    )
  );
}

/**
 * Implementation of hook_node_view_alter().
 */
function scratchpads_media_gallery_node_view($node, $view_mode, $langcode){
  if($node->type == 'media_gallery' && arg(0) == 'node' && $view_mode != 'search_index' && is_numeric(arg(1)) && !arg(2)){
    drupal_goto('gallery', array(
      'query' => array(
        'f' => array(
          'im_field_smg_galleries:' . $node->nid
        )
      )
    ));
  }
}

/**
 * Implementation of hook_page_alter().
 *
 * FIXME - We need to check for the presence of a facet filter.
 */
function scratchpads_media_gallery_menu_local_tasks_alter(&$data, $router_item, $root_path){
  if($router_item['path'] == 'gallery' && $nid = scratchpads_media_gallery_is_gallery_node()){
    // Add a tab linking to node/add to all pages.
    if(node_access('update', node_load($nid))){
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => array(
          'title' => t('Edit'),
          'href' => 'node/' . $nid . '/edit',
          'localized_options' => array(
            'attributes' => array(
              'title' => t('Edit this gallery')
            )
          )
        )
      );
      $data['tabs'][0]['output'][0]['#active'] = TRUE;
      $data['tabs'][0]['count'] = 2;
    }
  }
}

/**
 * Implementation of hook_node_insert().
 */
function scratchpads_media_gallery_node_insert($node){
  if(isset($node->field_media) && $node->type == 'media_gallery'){
    // We edit the file entities to add this node id to their respective field.
    $new_fids = array();
    $lang = field_language('node', $node, 'field_media');
    foreach($node->field_media[$lang] as $delta => $values){
      $new_fids[$values['fid']] = $values['fid'];
    }
    $files = entity_load('file', $new_fids);
    foreach($files as $file){
      // Adding
      $lang = field_language('file', $file, 'field_media');
      if(!isset($file->field_smg_galleries[$lang])){
        $file->field_smg_galleries[$lang] = array();
      }
      $file->field_smg_galleries[$lang][] = array(
        'nid' => $node->nid
      );
      entity_save('file', $file);
    }
  }
}

/**
 * Implementation of hook_node_update().
 */
function scratchpads_media_gallery_node_update($node){
  if(isset($node->field_media) && $node->type == 'media_gallery'){
    // We edit the file entities to add this node id to their respective field.
    // We simply get a list of fids that currently have this node associated, and
    // remove the ones that have been removed, and add ones that have been added.
    $results = db_select('field_data_field_smg_galleries', 'f')->fields('f', array(
      'entity_id'
    ))->condition('field_smg_galleries_nid', $node->nid)->execute();
    $current_fids = array();
    while($row = $results->fetch()){
      $current_fids[$row->entity_id] = $row->entity_id;
    }
    $new_fids = array();
    $lang = field_language('node', $node, 'field_media');
    foreach($node->field_media[$lang] as $delta => $values){
      $new_fids[$values['fid']] = $values['fid'];
    }
    $fids_to_add = array_diff_key($new_fids, $current_fids);
    $fids_to_remove = array_diff_key($current_fids, $new_fids);
    $files = entity_load('file', $fids_to_add);
    foreach($files as $file){
      // Adding
      $lang = field_language('file', $file, 'field_smg_galleries');
      if(!isset($file->field_smg_galleries[$lang])){
        $file->field_smg_galleries[$lang] = array();
      }
      $file->field_smg_galleries[$lang][] = array(
        'nid' => $node->nid
      );
      entity_save('file', $file);
    }
    $files = entity_load('file', $fids_to_remove);
    foreach($files as $file){
      // Removing
      $lang = field_language('file', $file, 'field_smg_galleries');
      foreach($file->field_smg_galleries[$lang] as $delta => $value){
        if($value['nid'] == $node->nid){
          unset($file->field_smg_galleries[$lang][$delta]);
        }
      }
      entity_save('file', $file);
    }
  }
}

/**
 * Implementation of hook_facetapi_facet_info().
 */
function scratchpads_media_gallery_facetapi_facet_info($searcher_info = FALSE){
  // Facets are usually associated with the type of content stored in the index.
  return array(
    'im_field_smg_galleries' => array(
      'name' => 'im_field_smg_galleries',
      'label' => t('Gallery'),
      'description' => t('Gallery'),
      'query types' => array(
        'term'
      ),
      'map callback' => 'scratchpads_media_gallery_map_callback',
      'map options' => array(
        'im_field_smg_galleries'
      )
    ),
    'im_field_cc_licence' => array(
      'name' => 'im_field_cc_licence',
      'label' => t('Licence'),
      'description' => t('Licence'),
      'query types' => array(
        'term'
      ),
      'map callback' => 'creative_commons_get_licence_types',
      'map options' => NULL
    ),
    'tus_type_name' => array(
      'name' => 'tus_type_name',
      'label' => t('Media type'),
      'description' => t('Media type'),
      'query types' => array(
        'term'
      )
    ),
    'ss_field_creator' => array(
      'name' => 'ss_field_creator',
      'label' => t('Creator'),
      'description' => t('Creator'),
      'query types' => array(
        'term'
      )
    ),
    'im_field_imaging_technique' => array(
      'name' => 'im_field_imaging_technique',
      'label' => t('Imaging technique'),
      'description' => t('Imaging technique'),
      'query types' => array(
        'term'
      ),
      'map callback' => 'facetapi_map_taxonomy_terms'
    ),
    'im_field_keywords' => array(
      'name' => 'im_field_keywords',
      'label' => t('Image keywords'),
      'description' => t('Image keywords'),
      'query types' => array(
        'term'
      ),
      'map callback' => 'facetapi_map_taxonomy_terms'
    ),
    'im_field_preparation_technique' => array(
      'name' => 'im_field_preparation_technique',
      'label' => t('Preparation technique'),
      'description' => t('Preparation technique'),
      'query types' => array(
        'term'
      ),
      'map callback' => 'facetapi_map_taxonomy_terms'
    )
  );
}

/**
 * Implements hook_media_wysiwyg_allowed_view_modes_alter() to prevent a large
 * list of media formats on the WYSIWYG editor.
 */
function scratchpads_media_gallery_media_wysiwyg_allowed_view_modes_alter(&$view_modes, $file){
  // file_styles_large, file_styles_medium, file_styles_original, file_styles_square_thumbnail, file_styles_thumbnail
  $new_view_modes = array();
  foreach(array(
    'file_styles_original',
    'file_styles_large',
    'file_styles_medium',
    'file_styles_thumbnail',
    'file_styles_square_thumbnail'
  ) as $key){
    $new_view_modes[$key] = $view_modes[$key];
  }
  $view_modes = $new_view_modes;
}

/**
 * Nah, we don't need any documentation here, of course not!
 */
function scratchpads_media_gallery_apachesolr_field_mappings_alter(&$mappings, $entity_type){
  // Enable indexing for text fields
  $mappings['text'] = array(
    'indexing_callback' => 'apachesolr_fields_default_indexing_callback',
    'map callback' => '',
    'index_type' => 'string',
    'facets' => TRUE,
    'facet missing allowed' => TRUE,
    'dependency plugins' => array(
      'bundle',
      'role'
    ),
    'hierarchy callback' => FALSE,
    'name_callback' => '',
    'facet mincount allowed' => FALSE,
    // Field API allows any field to be multi-valued.
    // If we set this to false we are able to sort
    'multiple' => FALSE
  );
}

/**
 * Map callback
 */
function scratchpads_media_gallery_map_callback($values, $options){
  if(count($values)){
    switch($options[0]){
      case 'im_field_smg_galleries':
        $result = db_select('node', 'n')->fields('n', array(
          'nid',
          'title'
        ))->condition('nid', $values, 'IN')->execute();
        $map = array();
        while($record = $result->fetchAssoc()){
          $map[$record['nid']] = $record['title'];
        }
        return $map;
    }
  }else{
    return array();
  }
}
