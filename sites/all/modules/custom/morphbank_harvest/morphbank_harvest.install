<?php
/**
 * @file  Initial installation of morphbank_harvest module
 *
 * In enable/install, sets up
 *   one field, field_morphank_specimen_id
 *   two tables, morphbank_harvests and morphbank_images, for record keeping
 *
 * In disable,
 *   removes field_morphbank_specimen_id
 *   removes links to specimens (in field_data_field_media)
 *   deletes files
 */

/**
 * Implements hook_enable().
 *
 * Adds field (and instance) to specimen observation for morphbank specimen IDs
 *
 * Adds field (and instance) to Image preparation techniques vocabulary for morphbank view IDs
 */
function morphbank_harvest_enable() {
  // If field_morphbank_specimen_id field exists, deletes
  $field = field_info_field('field_morphbank_specimen_id');
  if($field){
    field_delete_field('field_morphbank_specimen_id');
  }
  // Create morphbank specimen ID field
  $field = array(
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'field_name' => 'field_morphbank_specimen_id',
    'unsigned' => TRUE,
    'type' => 'number_integer',
    'size' => 'normal',
    'description' => t('The unique identifier for this specimen in the Morphbank system.'),
  );
  $field = field_create_field($field);

  // Add morphbank specimen ID field to Specimen/Observation content types
  $instance = array(
    'bundle' => 'specimen_observation',
    'entity_type' => 'node',
    'field_name' => 'field_morphbank_specimen_id',
    'type' => 'number_integer',
    'label' => t('Morphbank specimen ID'),
    'required' => 0,
    'default_value' => NULL,
    'deleted' => '0',
    'description' => t('The unique identifier for this specimen in the Morphbank system.'),
  );
  field_create_instance($instance);

  // If field_morphbank_specimen_id field exists, deletes
  $field = field_info_field('field_morphbank_view_id');
  if($field){
    field_delete_field('field_morphbank_view_id');
  }
  // Create morphbank view ID field
  $view_field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_morphbank_view_id',
      'unsigned' => TRUE,
      'type' => 'number_integer',
      'size' => 'normal',
      'description' => t('The unique identifier for this image view in the Morphbank system.'),
  );
  $view_field = field_create_field($view_field);

  // And add an instance of this view field to the imaging preparation technique vocabulary
  $view_instance = array(
      'bundle' => 'imaging_technique',
      'entity_type' => 'taxonomy_term',
      'field_name' => 'field_morphbank_view_id',
      'type' => 'number_integer',
      'label' => t('Morphbank view ID'),
      'required' => 0,
      'default_value' => NULL,
      'deleted' => '0',
      'description' => t('The unique identifier for this image view in the Morphbank system.'),
  );
  field_create_instance($view_instance);

  // Make the directory where images will be stored
  // Make it executable?
  @drupal_mkdir('public://morphbank');
//  @drupal_mkdir('public://morphbank', 777);
}

/**
 * Implements hook_disable().
 *
 * Deletes records in field_data_field_media and file_usage tables corresponding
 * to files that were harvested from Morphbank.  After records are removed, deletes
 * the files themselves.
 */
function morphbank_harvest_disable() {
  // Marks field for deletion
  field_delete_field('field_morphbank_specimen_id');
  field_delete_field('field_morphbank_view_id');

  // Find all files that were obtained from the morphbank harvest
  $morphbank_files = db_select('morphbank_images', 'm')->fields('m', array('fid'))
    ->distinct() // So each fid is returned only once
    ->execute();
  $fids = array();
  foreach ($morphbank_files as $row) {
    $fids[] = $row->fid;
  }

  // If there are any files listed in morphbank_images table, delete links and files
  if (count($fids) > 0) {
    // Delete records from field_data_field_media table
    db_delete('field_data_field_media')->condition('field_media_fid', $fids, 'IN')->execute();

    // Next delete records from file_usage table
    //TODO:  These are managed files, is this step necessary?
    db_delete('file_usage')->condition('fid', $fids, 'IN')->execute();

    // Remove the files themselves
    $files = file_load_multiple($fids);
    foreach ($files as $file) {
      file_delete($file);
    }
  }
}


/**
 * Implements hook_schema().
 *
 * Builds two tables used in record keeping:
 *   morphbank_harvests, which keeps track of queries to morphbank
 *   morphbank_images, which keeps track of the results (images) from those queries
 */
function morphbank_harvest_schema() {
  $schema = array();
  /**/
  // Table to hold queries
  $schema['morphbank_harvests'] = array(
    'fields' => array(
      'hid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'query' => array(
        'description' => 'The harvest details in a query string format',
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
      ),
      'execution_date' => array(
        'description' => 'The date, as Unix timestamp, this query was executed',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'problem' => array(
        'description' => 'Boolean to indicate if problems were encountered during the query',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      )
    ),
    //TODO: Consider adding indexes?
    'primary key' => array(
      'hid'
    ),
  );
  /**/
  // Table to hold image information
  $schema['morphbank_images'] = array(
    'fields' => array(
      'mid' => array(
        'description' => 'Primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hid' => array(
        'description' => 'The ID of the morphbank_harvests record that produced this image',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'morphbank_image_id' => array(
        'description' => 'The morphbank ID of the image',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
        //TODO: consider adding the morphbank view id here?
      'last_modified' => array(
        'description' => 'The date, as Unix timestamp, the Morphbank image record was last modified',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'morphbank_specimen_id' => array(
        'description' => 'The morphbank ID for the specimen in the image',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
      ),
      'fid' => array(
        'description' => 'The ID of the image in the file_managed table',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'original_filename' => array(
        'description' => 'The original name of the file as uploaded to Morphbank',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      )
    ),
    //TODO: Add indexes?
    'primary key' => array(
      'mid',
    ),
  );

  return $schema;
}