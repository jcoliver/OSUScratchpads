<?php

/**
 * Implements hook_menu()
 * 
 * Provide the default configuration pages for adding DwC-A files
 */
function dwcarchiver_menu(){
  return array(
    'admin/config/content/dwcarchiver' => array(
      'title' => 'DwC-Archiver',
      'description' => 'Add and configure custom DwC-Archives.',
      'page callback' => 'dwcarchiver_overview_page',
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc',
      'type' => MENU_NORMAL_ITEM
    ),
    'admin/config/content/dwcarchiver/list' => array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK
    ),
    'admin/config/content/dwcarchiver/settings' => array(
      'title' => 'Settings',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'dwcarchiver_settings'
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc'
    ),
    'admin/config/content/dwcarchiver/add' => array(
      'title' => 'Add DwC-Archive',
      'description' => 'Add custom DwC-Archive',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'dwcarchiver_archive_form'
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc',
      'type' => MENU_LOCAL_ACTION
    ),
    'admin/config/content/dwcarchiver/%dwcarchiver' => array(
      'title' => 'Edit %name',
      'title callback' => 'dwcarchiver_title',
      'title arguments' => array(
        'Edit @name',
        4
      ),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'dwcarchiver_archive_form',
        4
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc'
    ),
    'admin/config/content/dwcarchiver/%dwcarchiver/edit' => array(
      'title' => 'Edit',
      'title callback' => 'dwcarchiver_title',
      'title arguments' => array(
        'Edit @name',
        4
      ),
      'type' => MENU_DEFAULT_LOCAL_TASK
    ),
    'admin/config/content/dwcarchiver/%dwcarchiver/delete' => array(
      'title' => 'Delete',
      'title callback' => 'dwcarchiver_title',
      'title arguments' => array(
        'Delete @name',
        4
      ),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'dwcarchiver_archive_delete_form',
        4
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc'
    ),
    'admin/config/content/dwcarchiver/extension/%dwcarchiver_extension/delete' => array(
      'title' => 'Delete',
      'title callback' => 'dwcarchiver_title',
      'title arguments' => array(
        'Delete @name',
        5
      ),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'dwcarchiver_archive_extension_delete_form',
        5
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.pages.inc'
    ),
    'admin/config/content/dwcarchiver/%dwcarchiver/rebuild' => array(
      'title' => 'Rebuild',
      'title callback' => 'dwcarchiver_title',
      'title arguments' => array(
        'Rebuild @name',
        4
      ),
      'page callback' => 'dwcarchiver_rebuild',
      'page arguments' => array(
        4,
        FALSE
      ),
      'access arguments' => array(
        'configure dwcarchiver'
      ),
      'file' => 'dwcarchiver.rebuild.inc'
    )
  );
}

/**
 * Page title which takes a dwcarchiver object and extracts the label.
 */
function dwcarchiver_title($title, $dwcarchiver){
  return t($title, array(
    '@name' => $dwcarchiver->name
  ));
}

/**
 * Implements hook_theme()
 */
function dwcarchiver_theme($existing, $type, $theme, $path){
  return array(
    'dwcarchiver_archive_form' => array(
      'render element' => 'form',
      'file' => 'dwcarchiver.theme.inc'
    ),
    'dwcarchiver_archiver_form_fields_table' => array(
      'render element' => 'element',
      'file' => 'dwcarchiver.theme.inc'
    )
  );
}

/**
 * Return the dwcarchiver object matching a machine name.
 *
 */
function dwcarchiver_machine_name_load($name){
  return db_select('dwcarchiver_archive', 'd')->condition('machine_name', $name)->fields('d')->execute()->fetch();
}

/**
 * Return the dwcarchiver extension object matching a machine name.
 */
function dwcarchiver_extension_machine_name_load($name, $element = FALSE, $form_state = FALSE){
  // Machine names are not globally unique, but are only unique per archive.
  return db_select('dwcarchiver_extension', 'd')->condition('machine_name', $name)->condition('did', $form_state['dwcarchiver']->did)->fields('d')->execute()->fetch();
}

/**
 * Implements hook_menu_alter()
 * 
 * Add the DwC-A paths as defined in the settings above.
 */
function dwcarchiver_menu_alter(&$items){
  $results = db_select('dwcarchiver_archive', 'd')->fields('d')->execute();
  foreach($results as $row){
    $items[$row->machine_name . '.zip'] = array(
      'title' => 'DwC-Archive',
      'page callback' => 'dwcarchiver_deliver_archive',
      'page arguments' => array(
        $row->did
      ),
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'dwcarchiver.pages.inc',
      'file path' => drupal_get_path('module', 'dwcarchiver')
    );
  }
}

/**
 * Implements hook_permission()
 */
function dwcarchiver_permission(){
  return array(
    'configure dwcarchiver' => array(
      'title' => t('Configure DwC-Archiver')
    )
  );
}

/**
 * Load function
 */
function dwcarchiver_load($did){
  $archive = db_select('dwcarchiver_archive', 'd')->fields('d')->condition('did', $did)->execute()->fetch();
  if($archive){
    $archive->extensions = array();
    $eids = db_select('dwcarchiver_extension', 'e')->fields('e', array(
      'eid'
    ))->condition('did', $did)->execute()->fetchCol();
    foreach($eids as $eid){
      $archive->extensions[$eid] = dwcarchiver_extension_load($eid);
    }
    $archive->maps = db_select('dwcarchiver_map', 'm')->fields('m')->condition('did', $did)->condition('eid', 0)->execute()->fetchAllAssoc('field');
    $archive->maps = array_merge(array(
      'id' => (object)array(
        'eid' => 0,
        'did' => $did,
        'field' => 'uuid',
        'uri' => 'id',
        'processor' => 'dwcarchiver_raw_text'
      )
    ), $archive->maps);
  }
  return $archive;
}

/**
 * Load an extension.
 */
function dwcarchiver_extension_load($eid){
  $extension = db_select('dwcarchiver_extension', 'e')->condition('eid', $eid)->fields('e')->execute()->fetch();
  $extension->maps = db_select('dwcarchiver_map', 'd')->fields('d')->condition('eid', $eid)->execute()->fetchAllAssoc('field');
  $extension->maps = array_merge(array(
    'coreid' => (object)array(
      'eid' => $eid,
      'did' => $extension->did,
      'field' => 'uuid',
      'uri' => 'coreid',
      'processor' => 'dwcarchiver_raw_text'
    )
  ), $extension->maps);
  return $extension;
}

/**
 * Function for getting the processors
 */
function dwcarchiver_get_processors($reset = FALSE){
  $processors = drupal_static(__FUNCTION__, $reset);
  if(!$processors){
    // Get the processors for processing text fields.
    $processors = array();
    drupal_alter('dwcarchiver_processors', $processors);
  }
  return $processors;
}

/**
 * Alter the list of processors
 */
function dwcarchiver_dwcarchiver_processors_alter(&$processors){
  $processors['dwcarchiver_raw_text'] = array(
    'module' => 'dwcarchiver',
    'file' => 'dwcarchiver.processors.inc',
    'callback' => 'dwcarchiver_processor_raw',
    'label' => t('Raw value')
  );
}

/**
 * Implements hook_dwcarchiver_core_types_alter() on behalf of the taxonomy
 * module.
 */
function taxonomy_dwcarchiver_core_types_alter(&$core_types){
  foreach(taxonomy_vocabulary_get_names() as $machine_name => $vocabulary){
    $core_types['taxonomy_term/' . $machine_name] = array(
      'label' => t('Taxonomy term') . " (" . t($vocabulary->name) . ")",
      'links' => array()
    );
  }
  // Loop through all of the taxonomy term fields and add the entity/bundle that
  // they're attached to to the links.
  $entity_info = entity_get_info();
  foreach(field_read_fields(array(
    'type' => 'taxonomy_term_reference'
  )) as $field){
    foreach(field_read_instances(array(
      'field_name' => $field['field_name']
    )) as $instance){
      foreach($field['settings']['allowed_values'] as $allowed_values){
        if(!empty($allowed_values['vocabulary']) && isset($core_types['taxonomy_term/' . $allowed_values['vocabulary']])){
          $core_types['taxonomy_term/' . $allowed_values['vocabulary']]['links'][$field['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle']] = $instance['label'] . ': ' . $entity_info[$instance['entity_type']]['label'] . " (" . $entity_info[$instance['entity_type']]['bundles'][$instance['bundle']]['label'] . ")";
        }
      }
    }
  }
}

/**
 * Rebuild the archive files on cron.
 */
function dwcarchiver_cron(){}